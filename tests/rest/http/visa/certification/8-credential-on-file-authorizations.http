### Request:
### Field 22=01
### Field 25 may contain 08 or 59
### Field 60.8 is present if F25=59
### Field 126.13=C;
### Field 126.10=May be present
# @name=8.5 Authorization initial ecommerce
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 8.5 Authorization initial ecommerce",
  "currency": "EUR",
  "amount": 810,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "initialRecurring": true,
  "card": {
    "holder": "{{globalHostTestCard12_holder}}",
    "number": "{{globalHostTestCard12_pan}}",
    "cvv": "{{globalHostTestCard12_cvv}}",
    "expiry": {
      "year": "{{globalHostTestCard12_expiryYear}}",
      "month": "{{globalHostTestCard12_expiryMonth}}"
    }
  },
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "citMitIndicator": {
    "initiatedBy": "cardholder",
    "subCategory": "credentialOnFile"
  }
}

> {%
  client.test("8.5 Authorization initial ecommerce should return 200", function () {
    client.assert(response.status === 200)
  })

  client.test("8.5 Authorization initial ecommerce should return status code 00", function (){
    client.assert(response.body.cardSchemeResponse.code === "00", "cardSchemeResponse.code should be 00")
  })

  if (response.body.cardSchemeResponse.code === "00") {
    client.global.set("transaction_id", response.body.cardSchemeResponse.traceId)
    client.global.clear("authorization_id")
    client.global.set("authorization_id", response.body.id)
    client.global.clear("amount")
    client.global.set("amount", response.body.amount)
  }
%}

### 8.5 Authorization subsequent recurring ecommerce
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 8.5 Authorization initial ecommerce",
  "currency": "EUR",
  "amount": 810,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "card": {
    "holder": "{{globalHostTestCard12_holder}}",
    "number": "{{globalHostTestCard12_pan}}",
    "expiry": {
      "year": "{{globalHostTestCard12_expiryYear}}",
      "month": "{{globalHostTestCard12_expiryMonth}}"
    }
  },
  "initialRecurring": false,
  "initialTraceId": "{{transaction_id}}",
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "citMitIndicator": {
    "initiatedBy": "mitIndustryPractice",
    "subCategory": "unscheduledCredentialOnFile"
  }
}

> {%
    client.test("8.5 Authorization subsequent recurring ecommerce should return 200", function () {
        client.assert(response.status === 200)
    })

    client.test("8.5 Authorization subsequent recurring ecommerce should return status code 00", function (){
        client.assert(response.body.cardSchemeResponse.code === "00", "cardSchemeResponse.code should be 00")
    })

    if (response.body.cardSchemeResponse.code === "00") {
        client.global.set("transaction_id", response.body.cardSchemeResponse.traceId)
        client.global.clear("authorization_id")
        client.global.set("authorization_id", response.body.id)
        client.global.clear("amount")
        client.global.set("amount", response.body.amount)
    }
%}

### 8.6 COF Authorization initial ecommerce
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 8.6 Authorization initial ecommerce",
  "currency": "EUR",
  "amount": 820,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "initialRecurring": true,
  "card": {
    "holder": "{{globalHostTestCard12_holder}}",
    "number": "{{globalHostTestCard12_pan}}",
    "cvv": "{{globalHostTestCard12_cvv}}",
    "expiry": {
      "year": "{{globalHostTestCard12_expiryYear}}",
      "month": "{{globalHostTestCard12_expiryMonth}}"
    }
  },
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "citMitIndicator": {
    "initiatedBy": "cardholder",
    "subCategory": "credentialOnFile"
  }
}

> {%
    client.test("8.6 COF Authorization initial ecommerce should return 200", function () {
        client.assert(response.status === 200)
    })

    client.test("8.6 COF Authorization initial ecommerce should return status code 00", function (){
        client.assert(response.body.cardSchemeResponse.code === "00", "cardSchemeResponse.code should be 00")
    })

    if (response.body.cardSchemeResponse.code === "00") {
        client.global.set("transaction_id", response.body.cardSchemeResponse.traceId)
        client.global.clear("authorization_id")
        client.global.set("authorization_id", response.body.id)
        client.global.clear("amount")
        client.global.set("amount", response.body.amount)
    }
%}

### 8.6 Authorization subsequent recurring ecommerce
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 8.6 Authorization subsequent recurring ecommerce",
  "currency": "EUR",
  "amount": 820,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "card": {
    "holder": "{{globalHostTestCard3_holder}}",
    "number": "{{globalHostTestCard3_pan}}",
    "expiry": {
      "year": "{{globalHostTestCard3_expiryYear}}",
      "month": "{{globalHostTestCard3_expiryMonth}}"
    }
  },
  "initialRecurring": false,
  "initialTraceId": "{{transaction_id}}",
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "citMitIndicator": {
    "initiatedBy": "mitIndustryPractice",
    "subCategory": "unscheduledCredentialOnFile"
  }
}

> {%
    client.test("8.6 Authorization subsequent recurring ecommerce should return 200", function () {
        client.assert(response.status === 200)
    })

    client.test("8.6 Authorization subsequent recurring ecommerce should return status code 00", function (){
        client.assert(response.body.cardSchemeResponse.code === "00", "cardSchemeResponse.code is not approved")
    })

    if (response.body.cardSchemeResponse.code === "00") {
        client.global.set("authorization_id", response.body.id)
    }
%}

### 8.6 COF authorization reversal
POST {{host}}/v1/authorizations/{{authorization_id}}/reversals
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

> {%
    client.test("8.6 COF authorization reversal should return 201", function () {
        client.assert(response.status === 201, "status should be 201")
    })
%}