### 18.1 VISA Secure Authorization, CAVV passed Authentication Validation
< ./../../../js/utils.js

POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 18.1 VISA Secure Authorization, CAVV passed Authentication Validation",
  "currency": "USD",
  "amount": 1810,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "card": {
    "holder": "{{globalHostTestCardE1_holder}}",
    "number": "{{globalHostTestCardE1_pan}}",
    "expiry": {
      "year": "{{globalHostTestCardE1_expiryYear}}",
      "month": "{{globalHostTestCardE1_expiryMonth}}"
    }
  },
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "threeDSecure": {
    "authenticationVerificationValue": "{{globalHostTestCardE1_cavv3ds2}}",
    "version": "2.1.0",
    "ecommerceIndicator": "{{globalHostTestCardE1_eci}}",
    "directoryServerTransactionId": "{{directoryServerID}}"
  }
}

> {%
     client.test("18.1 VISA Secure Authorization, CAVV passed Authentication Validation should return 200", function () {
         client.assert(response.status === 200)
     })

     client.test("18.1 VISA Secure Authorization, CAVV passed Authentication Validation 3D secure ecommerceindicator should be 05", function(){
         client.assert(response.body.threeDSecure.ecommerceIndicator === "05", "threeDSecure.ecommerceIndicator should be 05")
     })

     client.test("18.1 VISA Secure Authorization, CAVV passed Authentication Validation cardschemeresponse code should be 00", function() {
         client.assert(response.body.cardSchemeResponse.code === "00", "cardSchemeResponse.code should be 00")
     })

     if (response.body.cardSchemeResponse.code === "00") {
         client.global.clear("authorization_id")
         client.global.set("authorization_id", response.body.id)
         client.global.clear("amount")
         client.global.set("amount", response.body.amount)
     }
%}

### 18.2 VISA Secure Authorization, CAVV failed Authentication Validation
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 18.2 VISA Secure Authorization, CAVV failed Authentication Validation",
  "currency": "USD",
  "amount": 1820,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "card": {
    "holder": "{{globalHostTestCardE1_holder}}",
    "number": "{{globalHostTestCardE1_pan}}",
    "expiry": {
      "year": "{{globalHostTestCardE1_expiryYear}}",
      "month": "{{globalHostTestCardE1_expiryMonth}}"
    }
  },
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "threeDSecure": {
    "authenticationVerificationValue": "{{WrongCAVVFor3DS}}",
    "version": "2.1.0",
    "ecommerceIndicator": "{{globalHostTestCardE1_eci}}",
    "directoryServerTransactionId": "{{directoryServerID}}"
  }
}

> {%
    client.test("18.2 VISA Secure Authorization, CAVV failed Authentication Validation should be 200", function () {
        client.assert(response.status === 200)
    })

    client.test("18.2 VISA Secure Authorization, CAVV failed Authentication Validation cardscheme response status should be declined", function () {
        client.assert(response.body.cardSchemeResponse.status === "declined", "cardSchemeResponse.code should be declined")

    })

    client.test("18.2 VISA Secure Authorization, CAVV passed Authentication Validation cardscheme response code should be 05", function() {
        client.assert(response.body.cardSchemeResponse.code === "05", "cardSchemeResponse.code should be 05")
    })
%}

### 18.4 VISA Secure Authorization, CAVV passed and CVV2 Failed
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 18.4 VISA Secure Authorization, CAVV passed and CVV2 Failed",
  "currency": "EUR",
  "amount": 1840,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "card": {
    "holder": "{{globalHostTestCardE1_holder}}",
    "number": "{{globalHostTestCardE1_pan}}",
    "cvv": "111",
    "expiry": {
      "year": "{{globalHostTestCardE1_expiryYear}}",
      "month": "{{globalHostTestCardE1_expiryMonth}}"
    }
  },
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "threeDSecure": {
    "authenticationVerificationValue": "{{globalHostTestCardE1_cavv3ds2}}",
    "version": "2.1.0",
    "ecommerceIndicator": "{{globalHostTestCardE1_eci}}",
    "directoryServerTransactionId": "{{directoryServerID}}"
  }
}

> {%
    client.test("18.4 VISA Secure Authorization, CAVV passed and CVV2 Failed should be 200", function () {
        client.assert(response.status === 200)
    })

    client.test("18.4 VISA Secure Authorization, CAVV passed and CVV2 Failed cardscheme response code should be 00", function () {
        client.assert(response.body.cardSchemeResponse.code === "00", "cardSchemeResponse.code should be 00")
    })

    if (response.body.cardSchemeResponse.code === "00") {
        client.global.clear("authorization_id")
        client.global.set("authorization_id", response.body.id)
        client.global.clear("amount")
        client.global.set("amount", response.body.amount)
    }
%}

### 18.4 VISA Secure Authorization, CAVV passed and CVV2 Failed
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 18.4 VISA Secure Authorization, CAVV passed and CVV2 Failed",
  "currency": "EUR",
  "amount": 1840,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "card": {
    "holder": "{{globalHostTestCardE1_holder}}",
    "number": "{{globalHostTestCardE1_pan}}",
    "cvv": "111",
    "expiry": {
      "year": "{{globalHostTestCardE1_expiryYear}}",
      "month": "{{globalHostTestCardE1_expiryMonth}}"
    }
  },
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "threeDSecure": {
    "authenticationVerificationValue": "{{globalHostTestCardE1_cavv3ds2}}",
    "version": "2.1.0",
    "ecommerceIndicator": "{{globalHostTestCardE1_eci}}",
    "directoryServerTransactionId": "{{directoryServerID}}"
  }
}

> {%
    client.test("18.4 VISA Secure Authorization, CAVV passed and CVV2 Failed should be 200", function () {
        client.assert(response.status === 200)
    })

    client.test("18.4 VISA Secure Authorization, CAVV passed and CVV2 Failed cardscheme response code should be 00", function () {
        client.assert(response.body.cardSchemeResponse.code === "00", "cardSchemeResponse.code should be 00")
    })

    if (response.body.cardSchemeResponse.code === "00") {
        client.global.clear("authorization_id")
        client.global.set("authorization_id", response.body.id)
        client.global.clear("amount")
        client.global.set("amount", response.body.amount)
    }
%}

### 18.5 VISA Secure Authorization, CAVV passed Attempt Validation
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 18.5 VISA Secure Authorization, CAVV passed Attempt Validation",
  "currency": "EUR",
  "amount": 1850,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "card": {
    "holder": "{{globalHostTestCardE2_holder}}",
    "number": "{{globalHostTestCardE2_pan}}",
    "cvv": "{{globalHostTestCardE2_cvv}}",
    "expiry": {
      "year": "{{globalHostTestCardE2_expiryYear}}",
      "month": "{{globalHostTestCardE2_expiryMonth}}"
    }
  },
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "threeDSecure": {
    "authenticationVerificationValue": "{{globalHostTestCardE2_cavv3ds2}}",
    "version": "2.1.0",
    "ecommerceIndicator": "{{globalHostTestCardE2_eci}}",
    "directoryServerTransactionId": "{{directoryServerID}}"
  }
}

> {%
    client.test("18.5 VISA Secure Authorization, CAVV passed Attempt Validation should be 200 response code", function () {
        client.assert(response.status === 200)
    })
    client.test("18.5 VISA Secure Authorization, CAVV passed Attempt Validation 3D secure ecommerce indicator should 06", function() {
        client.assert(response.body.threeDSecure.ecommerceIndicator === "06")
    })
    client.test("18.5 VISA Secure Authorization, CAVV passed Attempt Validation 3D secure cardscheme response code should be 00", function () {
        client.assert(response.body.cardSchemeResponse.code === "00")
    })
%}

### 18.6 VISA Secure Authorization, CAVV failed Attempt Validation
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 18.6 VISA Secure Authorization, CAVV failed Attempt Validation",
  "currency": "EUR",
  "amount": 1860,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "card": {
    "holder": "{{globalHostTestCardE2_holder}}",
    "number": "{{globalHostTestCardE2_pan}}",
    "cvv": "{{globalHostTestCardE2_cvv}}",
    "expiry": {
      "year": "{{globalHostTestCardE2_expiryYear}}",
      "month": "{{globalHostTestCardE2_expiryMonth}}"
    }
  },
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "threeDSecure": {
    "authenticationVerificationValue": "{{WrongCAVVFor3DSAttempt}}",
    "version": "2.1.0",
    "ecommerceIndicator": "{{globalHostTestCardE2_eci}}",
    "directoryServerTransactionId": "{{directoryServerID}}"
  }
}

> {%
    client.test("18.6 VISA Secure Authorization, CAVV failed Attempt Validation should be 200 response code ", function () {
        client.assert(response.status === 200)
    })
    client.test("18.6 VISA Secure Authorization, CAVV failed Attempt Validation cardscheme response status should be declined", function () {
        client.assert(response.body.cardSchemeResponse.status === "declined")
    })
    client.test("18.6 VISA Secure Authorization, CAVV failed Attempt Validation cardscheme response code should be 05", function() {
        client.assert(response.body.cardSchemeResponse.code === "05")
    })
%}

### 18.7 VISA Secure Authorization, e-commerce with CAVV - 3DS v2.2.x+
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 18.7 VISA Secure Authorization, e-commerce with CAVV - 3DS v2.2.x+",
  "currency": "EUR",
  "amount": 1870,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "card": {
    "holder": "{{globalHostTestCardE3_holder}}",
    "number": "{{globalHostTestCardE3_pan}}",
    "cvv": "{{globalHostTestCardE3_cvv}}",
    "expiry": {
      "year": "{{globalHostTestCardE3_expiryYear}}",
      "month": "{{globalHostTestCardE3_expiryMonth}}"
    }
  },
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "threeDSecure": {
    "authenticationVerificationValue": "{{globalHostTestCardE3_cavv3ds2}}",
    "version": "2.2.0",
    "ecommerceIndicator": "{{globalHostTestCardE3_eci}}",
    "directoryServerTransactionId": "{{directoryServerID}}"
  }
}

> {%
    client.test("18.7 VISA Secure Authorization, e-commerce with CAVV - 3DS v2.2.x+ should be 200 response code", function () {
        client.assert(response.status === 200)
    })
    client.test("18.7 VISA Secure Authorization, e-commerce with CAVV - 3DS v2.2.x+ cardscheme response status should be approved", function() {
        client.assert(response.body.cardSchemeResponse.status == "approved")
    })
    client.test("18.7 VISA Secure Authorization, e-commerce with CAVV - 3DS v2.2.x+ cardscheme response code should be 00", function () {
        client.assert(response.body.cardSchemeResponse.code === "00")
    })
%}

### 18.9 VISA Secure Authorization, Strong Customer Authentication
POST {{host}}/v1/authorizations
Content-Type: application/json
nonce: gw-{{$random.uuid}}
Authorization: Basic {{authorization_perm}}

{
  "reference": "VISA Cert Test 18.9 VISA Secure Authorization, Strong Customer Authentication",
  "currency": "EUR",
  "amount": 1890,
  "localTransactionDateTime": "{{currentDateTime}}",
  "source": "ecommerce",
  "authorizationType": "{{authorizationType}}",
  "card": {
    "holder": "{{globalHostTestCardE13_holder}}",
    "number": "{{globalHostTestCardE13_pan}}",
    "cvv": "{{globalHostTestCardE13_cvv}}",
    "expiry": {
      "year": "{{globalHostTestCardE13_expiryYear}}",
      "month": "{{globalHostTestCardE13_expiryMonth}}"
    }
  },
  "cardAcceptor": {
    "name": "{{cardAcceptorName}}",
    "city": "{{cardAcceptorCity}}",
    "country": "{{cardAcceptorCountry}}",
    "postalCode": "{{cardAcceptorPostalCode}}",
    "categoryCode": "{{cardAcceptorCategoryCode}}",
    "id": "{{cardAcceptorId}}"
  },
  "threeDSecure": {
    "authenticationVerificationValue": "{{globalHostTestCardE13_cavv}}",
    "version": "2.1.0",
    "ecommerceIndicator": "{{globalHostTestCardE13_eci}}",
    "directoryServerTransactionId": "{{directoryServerID}}"
  },
  "exemption": "lowValue"
}

> {%
    client.test("18.9 VISA Secure Authorization, VISA Secure Authorization, Strong Customer Authentication should be 200 response code", function () {
        client.assert(response.status === 200)
    })
    client.test("18.9 VISA Secure Authorization, VISA Secure Authorization, Strong Customer Authentication cardschemeresponse status should be approved", function() {
        client.assert(response.body.cardSchemeResponse.status == "approved")
    })
    client.test("18.9 VISA Secure Authorization, VISA Secure Authorization, Strong Customer Authentication cardscheme response code should be 00", function () {
        client.assert(response.body.cardSchemeResponse.code === "00", "cardSchemeResponse.code should be 00")
    })

    if (response.body.cardSchemeResponse.code === "00") {
        client.global.clear("authorization_id")
        client.global.set("authorization_id", response.body.id)
        client.global.clear("amount")
        client.global.set("amount", response.body.amount)
    }
%}