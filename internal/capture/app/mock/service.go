// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "gitlab.cmpayments.local/creditcard/authorization/internal/entity"
)

// MockCaptureRepository is a mock of CaptureRepository interface.
type MockCaptureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCaptureRepositoryMockRecorder
}

// MockCaptureRepositoryMockRecorder is the mock recorder for MockCaptureRepository.
type MockCaptureRepositoryMockRecorder struct {
	mock *MockCaptureRepository
}

// NewMockCaptureRepository creates a new mock instance.
func NewMockCaptureRepository(ctrl *gomock.Controller) *MockCaptureRepository {
	mock := &MockCaptureRepository{ctrl: ctrl}
	mock.recorder = &MockCaptureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptureRepository) EXPECT() *MockCaptureRepositoryMockRecorder {
	return m.recorder
}

// CreateCapture mocks base method.
func (m *MockCaptureRepository) CreateCapture(ctx context.Context, capture entity.Capture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCapture", ctx, capture)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCapture indicates an expected call of CreateCapture.
func (mr *MockCaptureRepositoryMockRecorder) CreateCapture(ctx, capture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCapture", reflect.TypeOf((*MockCaptureRepository)(nil).CreateCapture), ctx, capture)
}

// CreateRefundCapture mocks base method.
func (m *MockCaptureRepository) CreateRefundCapture(ctx context.Context, capture entity.RefundCapture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefundCapture", ctx, capture)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRefundCapture indicates an expected call of CreateRefundCapture.
func (mr *MockCaptureRepositoryMockRecorder) CreateRefundCapture(ctx, capture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefundCapture", reflect.TypeOf((*MockCaptureRepository)(nil).CreateRefundCapture), ctx, capture)
}

// FinalCaptureExists mocks base method.
func (m *MockCaptureRepository) FinalCaptureExists(ctx context.Context, authorizationID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalCaptureExists", ctx, authorizationID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalCaptureExists indicates an expected call of FinalCaptureExists.
func (mr *MockCaptureRepositoryMockRecorder) FinalCaptureExists(ctx, authorizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalCaptureExists", reflect.TypeOf((*MockCaptureRepository)(nil).FinalCaptureExists), ctx, authorizationID)
}

// GetCaptureRefundSummary mocks base method.
func (m *MockCaptureRepository) GetCaptureRefundSummary(ctx context.Context, refund entity.Refund) (entity.CaptureRefundSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCaptureRefundSummary", ctx, refund)
	ret0, _ := ret[0].(entity.CaptureRefundSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCaptureRefundSummary indicates an expected call of GetCaptureRefundSummary.
func (mr *MockCaptureRepositoryMockRecorder) GetCaptureRefundSummary(ctx, refund interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaptureRefundSummary", reflect.TypeOf((*MockCaptureRepository)(nil).GetCaptureRefundSummary), ctx, refund)
}

// GetCaptureSummary mocks base method.
func (m *MockCaptureRepository) GetCaptureSummary(ctx context.Context, authorization entity.Authorization) (entity.CaptureSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCaptureSummary", ctx, authorization)
	ret0, _ := ret[0].(entity.CaptureSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCaptureSummary indicates an expected call of GetCaptureSummary.
func (mr *MockCaptureRepositoryMockRecorder) GetCaptureSummary(ctx, authorization interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaptureSummary", reflect.TypeOf((*MockCaptureRepository)(nil).GetCaptureSummary), ctx, authorization)
}

// GetCapturesByAuthorizationIDs mocks base method.
func (m *MockCaptureRepository) GetCapturesByAuthorizationIDs(ctx context.Context, ids []string) ([]entity.Capture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapturesByAuthorizationIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.Capture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapturesByAuthorizationIDs indicates an expected call of GetCapturesByAuthorizationIDs.
func (mr *MockCaptureRepositoryMockRecorder) GetCapturesByAuthorizationIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapturesByAuthorizationIDs", reflect.TypeOf((*MockCaptureRepository)(nil).GetCapturesByAuthorizationIDs), ctx, ids)
}

// UpdateCapture mocks base method.
func (m *MockCaptureRepository) UpdateCapture(ctx context.Context, capture entity.Capture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCapture", ctx, capture)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCapture indicates an expected call of UpdateCapture.
func (mr *MockCaptureRepositoryMockRecorder) UpdateCapture(ctx, capture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCapture", reflect.TypeOf((*MockCaptureRepository)(nil).UpdateCapture), ctx, capture)
}

// MockAuthorizationRepository is a mock of AuthorizationRepository interface.
type MockAuthorizationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationRepositoryMockRecorder
}

// MockAuthorizationRepositoryMockRecorder is the mock recorder for MockAuthorizationRepository.
type MockAuthorizationRepositoryMockRecorder struct {
	mock *MockAuthorizationRepository
}

// NewMockAuthorizationRepository creates a new mock instance.
func NewMockAuthorizationRepository(ctrl *gomock.Controller) *MockAuthorizationRepository {
	mock := &MockAuthorizationRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorizationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationRepository) EXPECT() *MockAuthorizationRepositoryMockRecorder {
	return m.recorder
}

// AuthorizationAlreadyReversed mocks base method.
func (m *MockAuthorizationRepository) AuthorizationAlreadyReversed(ctx context.Context, id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationAlreadyReversed", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizationAlreadyReversed indicates an expected call of AuthorizationAlreadyReversed.
func (mr *MockAuthorizationRepositoryMockRecorder) AuthorizationAlreadyReversed(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationAlreadyReversed", reflect.TypeOf((*MockAuthorizationRepository)(nil).AuthorizationAlreadyReversed), ctx, id)
}

// GetAuthorizationWithSchemeData mocks base method.
func (m *MockAuthorizationRepository) GetAuthorizationWithSchemeData(ctx context.Context, pspID, authorizationID uuid.UUID) (entity.Authorization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationWithSchemeData", ctx, pspID, authorizationID)
	ret0, _ := ret[0].(entity.Authorization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationWithSchemeData indicates an expected call of GetAuthorizationWithSchemeData.
func (mr *MockAuthorizationRepositoryMockRecorder) GetAuthorizationWithSchemeData(ctx, pspID, authorizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationWithSchemeData", reflect.TypeOf((*MockAuthorizationRepository)(nil).GetAuthorizationWithSchemeData), ctx, pspID, authorizationID)
}

// MockRefundRepository is a mock of RefundRepository interface.
type MockRefundRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefundRepositoryMockRecorder
}

// MockRefundRepositoryMockRecorder is the mock recorder for MockRefundRepository.
type MockRefundRepositoryMockRecorder struct {
	mock *MockRefundRepository
}

// NewMockRefundRepository creates a new mock instance.
func NewMockRefundRepository(ctrl *gomock.Controller) *MockRefundRepository {
	mock := &MockRefundRepository{ctrl: ctrl}
	mock.recorder = &MockRefundRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefundRepository) EXPECT() *MockRefundRepositoryMockRecorder {
	return m.recorder
}

// GetRefund mocks base method.
func (m *MockRefundRepository) GetRefund(ctx context.Context, pspID, refundID uuid.UUID) (entity.Refund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund", ctx, pspID, refundID)
	ret0, _ := ret[0].(entity.Refund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockRefundRepositoryMockRecorder) GetRefund(ctx, pspID, refundID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockRefundRepository)(nil).GetRefund), ctx, pspID, refundID)
}
