// Code generated by MockGen. DO NOT EDIT.
// Source: ./authenticate.go

// Package web_test is a generated GoMock package.
package web_test

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	processing "gitlab.cmpayments.local/creditcard/authorization/internal/processing"
	web "gitlab.cmpayments.local/creditcard/authorization/internal/web"
)

// MockPermissionStore is a mock of PermissionStore interface.
type MockPermissionStore struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionStoreMockRecorder
}

// MockPermissionStoreMockRecorder is the mock recorder for MockPermissionStore.
type MockPermissionStoreMockRecorder struct {
	mock *MockPermissionStore
}

// NewMockPermissionStore creates a new mock instance.
func NewMockPermissionStore(ctrl *gomock.Controller) *MockPermissionStore {
	mock := &MockPermissionStore{ctrl: ctrl}
	mock.recorder = &MockPermissionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionStore) EXPECT() *MockPermissionStoreMockRecorder {
	return m.recorder
}

// GetPermissionsForAPIKey mocks base method.
func (m *MockPermissionStore) GetPermissionsForAPIKey(ctx context.Context, apiKey string) ([]processing.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsForAPIKey", ctx, apiKey)
	ret0, _ := ret[0].([]processing.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsForAPIKey indicates an expected call of GetPermissionsForAPIKey.
func (mr *MockPermissionStoreMockRecorder) GetPermissionsForAPIKey(ctx, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForAPIKey", reflect.TypeOf((*MockPermissionStore)(nil).GetPermissionsForAPIKey), ctx, apiKey)
}

// GetPermissionsForAccountGuid mocks base method.
func (m *MockPermissionStore) GetPermissionsForAccountGuid(ctx context.Context, accountGuid string) ([]processing.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsForAccountGuid", ctx, accountGuid)
	ret0, _ := ret[0].([]processing.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsForAccountGuid indicates an expected call of GetPermissionsForAccountGuid.
func (mr *MockPermissionStoreMockRecorder) GetPermissionsForAccountGuid(ctx, accountGuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForAccountGuid", reflect.TypeOf((*MockPermissionStore)(nil).GetPermissionsForAccountGuid), ctx, accountGuid)
}

// MockPlatformClient is a mock of PlatformClient interface.
type MockPlatformClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformClientMockRecorder
}

// MockPlatformClientMockRecorder is the mock recorder for MockPlatformClient.
type MockPlatformClientMockRecorder struct {
	mock *MockPlatformClient
}

// NewMockPlatformClient creates a new mock instance.
func NewMockPlatformClient(ctrl *gomock.Controller) *MockPlatformClient {
	mock := &MockPlatformClient{ctrl: ctrl}
	mock.recorder = &MockPlatformClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatformClient) EXPECT() *MockPlatformClientMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockPlatformClient) GetAccount(ctx context.Context, authCookies []*http.Cookie) (web.PlatformAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, authCookies)
	ret0, _ := ret[0].(web.PlatformAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockPlatformClientMockRecorder) GetAccount(ctx, authCookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockPlatformClient)(nil).GetAccount), ctx, authCookies)
}

// MockPlatformAccount is a mock of PlatformAccount interface.
type MockPlatformAccount struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformAccountMockRecorder
}

// MockPlatformAccountMockRecorder is the mock recorder for MockPlatformAccount.
type MockPlatformAccountMockRecorder struct {
	mock *MockPlatformAccount
}

// NewMockPlatformAccount creates a new mock instance.
func NewMockPlatformAccount(ctrl *gomock.Controller) *MockPlatformAccount {
	mock := &MockPlatformAccount{ctrl: ctrl}
	mock.recorder = &MockPlatformAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatformAccount) EXPECT() *MockPlatformAccountMockRecorder {
	return m.recorder
}

// IsEmployee mocks base method.
func (m *MockPlatformAccount) IsEmployee() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmployee")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmployee indicates an expected call of IsEmployee.
func (mr *MockPlatformAccountMockRecorder) IsEmployee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmployee", reflect.TypeOf((*MockPlatformAccount)(nil).IsEmployee))
}

// PersonGuid mocks base method.
func (m *MockPlatformAccount) PersonGuid() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersonGuid")
	ret0, _ := ret[0].(string)
	return ret0
}

// PersonGuid indicates an expected call of PersonGuid.
func (mr *MockPlatformAccountMockRecorder) PersonGuid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonGuid", reflect.TypeOf((*MockPlatformAccount)(nil).PersonGuid))
}
