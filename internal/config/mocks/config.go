// Code generated by MockGen. DO NOT EDIT.
// Source: ./config.go

// Package storage_mocks is a generated GoMock package.
package storage_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "gitlab.cmpayments.local/creditcard/authorization/internal/config"
	entity "gitlab.cmpayments.local/creditcard/authorization/internal/entity"
)

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// FetchConfig mocks base method.
func (m *MockConfigService) FetchConfig(ctx context.Context, merchantID string) (entity.CardAcceptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchConfig", ctx, merchantID)
	ret0, _ := ret[0].(entity.CardAcceptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchConfig indicates an expected call of FetchConfig.
func (mr *MockConfigServiceMockRecorder) FetchConfig(ctx, merchantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchConfig", reflect.TypeOf((*MockConfigService)(nil).FetchConfig), ctx, merchantID)
}

// MockConfigSnapshotter is a mock of ConfigSnapshotter interface.
type MockConfigSnapshotter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSnapshotterMockRecorder
}

// MockConfigSnapshotterMockRecorder is the mock recorder for MockConfigSnapshotter.
type MockConfigSnapshotterMockRecorder struct {
	mock *MockConfigSnapshotter
}

// NewMockConfigSnapshotter creates a new mock instance.
func NewMockConfigSnapshotter(ctrl *gomock.Controller) *MockConfigSnapshotter {
	mock := &MockConfigSnapshotter{ctrl: ctrl}
	mock.recorder = &MockConfigSnapshotterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigSnapshotter) EXPECT() *MockConfigSnapshotterMockRecorder {
	return m.recorder
}

// SnapshotEffectiveConfig mocks base method.
func (m *MockConfigSnapshotter) SnapshotEffectiveConfig(merchantID string) (config.EffectiveConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotEffectiveConfig", merchantID)
	ret0, _ := ret[0].(config.EffectiveConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotEffectiveConfig indicates an expected call of SnapshotEffectiveConfig.
func (mr *MockConfigSnapshotterMockRecorder) SnapshotEffectiveConfig(merchantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotEffectiveConfig", reflect.TypeOf((*MockConfigSnapshotter)(nil).SnapshotEffectiveConfig), merchantID)
}
