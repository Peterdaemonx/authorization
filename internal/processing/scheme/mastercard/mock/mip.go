// Code generated by MockGen. DO NOT EDIT.
// Source: ./mip.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connection "gitlab.cmpayments.local/creditcard/authorization/internal/infrastructure/connection"
)

// Mockpool is a mock of pool interface.
type Mockpool struct {
	ctrl     *gomock.Controller
	recorder *MockpoolMockRecorder
}

// MockpoolMockRecorder is the mock recorder for Mockpool.
type MockpoolMockRecorder struct {
	mock *Mockpool
}

// NewMockpool creates a new mock instance.
func NewMockpool(ctrl *gomock.Controller) *Mockpool {
	mock := &Mockpool{ctrl: ctrl}
	mock.recorder = &MockpoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpool) EXPECT() *MockpoolMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *Mockpool) Send(ctx context.Context, request connection.Request) connection.Received {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, request)
	ret0, _ := ret[0].(connection.Received)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockpoolMockRecorder) Send(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Mockpool)(nil).Send), ctx, request)
}

// MockStanProvider is a mock of StanProvider interface.
type MockStanProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStanProviderMockRecorder
}

// MockStanProviderMockRecorder is the mock recorder for MockStanProvider.
type MockStanProviderMockRecorder struct {
	mock *MockStanProvider
}

// NewMockStanProvider creates a new mock instance.
func NewMockStanProvider(ctrl *gomock.Controller) *MockStanProvider {
	mock := &MockStanProvider{ctrl: ctrl}
	mock.recorder = &MockStanProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStanProvider) EXPECT() *MockStanProviderMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockStanProvider) Next() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(int)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockStanProviderMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockStanProvider)(nil).Next))
}
