// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "gitlab.cmpayments.local/creditcard/authorization/internal/entity"
)

// MockTokenizer is a mock of Tokenizer interface.
type MockTokenizer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenizerMockRecorder
}

// MockTokenizerMockRecorder is the mock recorder for MockTokenizer.
type MockTokenizerMockRecorder struct {
	mock *MockTokenizer
}

// NewMockTokenizer creates a new mock instance.
func NewMockTokenizer(ctrl *gomock.Controller) *MockTokenizer {
	mock := &MockTokenizer{ctrl: ctrl}
	mock.recorder = &MockTokenizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenizer) EXPECT() *MockTokenizerMockRecorder {
	return m.recorder
}

// Detokenize mocks base method.
func (m *MockTokenizer) Detokenize(ctx context.Context, merchantID string, card entity.Card) (entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detokenize", ctx, merchantID, card)
	ret0, _ := ret[0].(entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detokenize indicates an expected call of Detokenize.
func (mr *MockTokenizerMockRecorder) Detokenize(ctx, merchantID, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detokenize", reflect.TypeOf((*MockTokenizer)(nil).Detokenize), ctx, merchantID, card)
}

// MockReversalRepository is a mock of ReversalRepository interface.
type MockReversalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReversalRepositoryMockRecorder
}

// MockReversalRepositoryMockRecorder is the mock recorder for MockReversalRepository.
type MockReversalRepositoryMockRecorder struct {
	mock *MockReversalRepository
}

// NewMockReversalRepository creates a new mock instance.
func NewMockReversalRepository(ctrl *gomock.Controller) *MockReversalRepository {
	mock := &MockReversalRepository{ctrl: ctrl}
	mock.recorder = &MockReversalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReversalRepository) EXPECT() *MockReversalRepositoryMockRecorder {
	return m.recorder
}

// CreateReversal mocks base method.
func (m *MockReversalRepository) CreateReversal(ctx context.Context, reversal entity.Reversal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReversal", ctx, reversal)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReversal indicates an expected call of CreateReversal.
func (mr *MockReversalRepositoryMockRecorder) CreateReversal(ctx, reversal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReversal", reflect.TypeOf((*MockReversalRepository)(nil).CreateReversal), ctx, reversal)
}

// UpdateReversalResponse mocks base method.
func (m *MockReversalRepository) UpdateReversalResponse(ctx context.Context, reversal entity.Reversal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReversalResponse", ctx, reversal)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReversalResponse indicates an expected call of UpdateReversalResponse.
func (mr *MockReversalRepositoryMockRecorder) UpdateReversalResponse(ctx, reversal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReversalResponse", reflect.TypeOf((*MockReversalRepository)(nil).UpdateReversalResponse), ctx, reversal)
}

// MockAuthorizationRepository is a mock of AuthorizationRepository interface.
type MockAuthorizationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationRepositoryMockRecorder
}

// MockAuthorizationRepositoryMockRecorder is the mock recorder for MockAuthorizationRepository.
type MockAuthorizationRepositoryMockRecorder struct {
	mock *MockAuthorizationRepository
}

// NewMockAuthorizationRepository creates a new mock instance.
func NewMockAuthorizationRepository(ctrl *gomock.Controller) *MockAuthorizationRepository {
	mock := &MockAuthorizationRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorizationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationRepository) EXPECT() *MockAuthorizationRepositoryMockRecorder {
	return m.recorder
}

// AuthorizationAlreadyReversed mocks base method.
func (m *MockAuthorizationRepository) AuthorizationAlreadyReversed(ctx context.Context, id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationAlreadyReversed", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizationAlreadyReversed indicates an expected call of AuthorizationAlreadyReversed.
func (mr *MockAuthorizationRepositoryMockRecorder) AuthorizationAlreadyReversed(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationAlreadyReversed", reflect.TypeOf((*MockAuthorizationRepository)(nil).AuthorizationAlreadyReversed), ctx, id)
}

// GetAuthorizationWithSchemeData mocks base method.
func (m *MockAuthorizationRepository) GetAuthorizationWithSchemeData(ctx context.Context, pspID, authorizationID uuid.UUID) (entity.Authorization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationWithSchemeData", ctx, pspID, authorizationID)
	ret0, _ := ret[0].(entity.Authorization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationWithSchemeData indicates an expected call of GetAuthorizationWithSchemeData.
func (mr *MockAuthorizationRepositoryMockRecorder) GetAuthorizationWithSchemeData(ctx, pspID, authorizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationWithSchemeData", reflect.TypeOf((*MockAuthorizationRepository)(nil).GetAuthorizationWithSchemeData), ctx, pspID, authorizationID)
}
