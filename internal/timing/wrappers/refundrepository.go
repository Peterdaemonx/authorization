// Code generated by timing/wrappers/generate, DO NOT EDIT.
// Generated on Mon May 15 15:07 2023
package timingwrappers

import (
	"context"
	uuid "github.com/google/uuid"
	entity "gitlab.cmpayments.local/creditcard/authorization/internal/entity"
	app "gitlab.cmpayments.local/creditcard/authorization/internal/refund/app"
	timing "gitlab.cmpayments.local/creditcard/authorization/internal/timing"
)

type RefundRepository struct {
	Base app.Repository
}

func (w RefundRepository) CreateMastercardRefund(ctx context.Context, r entity.Refund) error {
	timing.Start(ctx, "RefundRepository.CreateMastercardRefund")
	defer timing.Stop(ctx, "RefundRepository.CreateMastercardRefund")
	return w.Base.CreateMastercardRefund(ctx, r)
}
func (w RefundRepository) CreateRefund(ctx context.Context, r entity.Refund) error {
	timing.Start(ctx, "RefundRepository.CreateRefund")
	defer timing.Stop(ctx, "RefundRepository.CreateRefund")
	return w.Base.CreateRefund(ctx, r)
}
func (w RefundRepository) CreateVisaRefund(ctx context.Context, r entity.Refund) error {
	timing.Start(ctx, "RefundRepository.CreateVisaRefund")
	defer timing.Stop(ctx, "RefundRepository.CreateVisaRefund")
	return w.Base.CreateVisaRefund(ctx, r)
}
func (w RefundRepository) GetAllRefunds(ctx context.Context, pspID uuid.UUID, filters entity.Filters, params map[string]interface{}) (entity.Metadata, []entity.Refund, error) {
	timing.Start(ctx, "RefundRepository.GetAllRefunds")
	defer timing.Stop(ctx, "RefundRepository.GetAllRefunds")
	return w.Base.GetAllRefunds(ctx, pspID, filters, params)
}
func (w RefundRepository) GetRefund(ctx context.Context, pspID uuid.UUID, refundID uuid.UUID) (entity.Refund, error) {
	timing.Start(ctx, "RefundRepository.GetRefund")
	defer timing.Stop(ctx, "RefundRepository.GetRefund")
	return w.Base.GetRefund(ctx, pspID, refundID)
}
func (w RefundRepository) UpdateRefundResponse(ctx context.Context, r entity.Refund) error {
	timing.Start(ctx, "RefundRepository.UpdateRefundResponse")
	defer timing.Stop(ctx, "RefundRepository.UpdateRefundResponse")
	return w.Base.UpdateRefundResponse(ctx, r)
}
